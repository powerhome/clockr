defmodule Clockr.MasterclockCrypt do
  @moduledoc """
  Utilities for managing encrypted Masterclock packets
  """

  use Bitwise

  @prog_key {0x74, 0x12, 0x02, 0xfb, 0xcc, 0x24, 0x5b, 0x82, 0x61, 0xe7, 0x3f, 0x9a, 0x26, 0x7c, 0xd3, 0xa0, 0x42}

  @doc """
    Transforms a list bytes using the Masterclock algorithm
    data should be a list of bytes to be encrypted
    Returns binary string

    ## Examples

        iex> input = [0x23, 0x81, 0xD7, 0x65, 0x10, 0xB3, 0x2F, 0xE1, 0x00, 0x00, 0x14, 0xC7, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0C, 0x22, 0x38]
        iex> Clockr.MasterclockCrypt.mccrypt(input)
        [0x56, 0x91, 0xD6, 0x9A, 0xD9, 0x91, 0x73, 0x6B, 0x68, 0xED, 0x20, 0x51, 0x2B, 0x72, 0xDC, 0x30, 0x53, 0x66, 0x01, 0x16, 0xEE, 0xDA, 0x33, 0x43, 0x9B, 0x7B, 0xFC, 0x23, 0x87, 0x38, 0x63, 0xF3, 0x81, 0x60, 0x57, 0x36, 0x27, 0xDD, 0xEB, 0x0C, 0x72, 0xA8, 0x4A, 0xCB, 0x10, 0xB8, 0x2B, 0x74]
  """
  @spec mccrypt([any()]) :: binary()
  def mccrypt(data) do
    {bytes, _, _} = Enum.reduce data, {[], 1, 0}, fn(inbyte, acc) ->
      {bytes, padcnt, keycnt} = acc
      {newbyte, newpadcnt, newkeycnt} = mccrypt_byte({inbyte, padcnt, keycnt})

      {bytes ++ [newbyte], newpadcnt, newkeycnt}
    end
    bytes
  end

  defp mccrypt_byte({byte, padcnt, keycnt}) do
    crypted_byte = (byte ^^^ padcnt ^^^ elem(@prog_key, keycnt))

    newpadcnt = if(padcnt < 254, do: padcnt + 1, else: 1)

    newkeycnt = if(keycnt + 1 >= tuple_size(@prog_key), do: 0, else: keycnt + 1)

    {crypted_byte, newpadcnt, newkeycnt}
  end
end
