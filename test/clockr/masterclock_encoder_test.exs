defmodule Clockr.MasterclockEncoderTest do
  use ExUnit.Case

  test "encodes blank as appropriate control packet" do
    result = [0x23, 0x81, 0xD7, 0x65, 0x10, 0xB3, 0x2F, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]
    assert(Clockr.MasterclockEncoder.packetize({:blank, %{h: 0, m: 0, s: 0}}, {0x00, 0x01}) == result)
  end

  test "encodes dashes as appropriate control packet" do
    result = [0x23, 0x81, 0xD7, 0x65, 0x10, 0xB3, 0x2F, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00]
    assert(Clockr.MasterclockEncoder.packetize({:dashes, %{h: 0, m: 0, s: 0}}, {0x00, 0x01}) == result)
  end

  test "encodes time as appropriate control packet" do
    result = [0x23, 0x81, 0xD7, 0x65, 0x10, 0xB3, 0x2F, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    assert(Clockr.MasterclockEncoder.packetize({:time, %{h: 0, m: 0, s: 0}}, {0x00, 0x01}) == result)
  end

  test "encodes value as appropriate control packet" do
    result = [0x23, 0x81, 0xD7, 0x65, 0x10, 0xB3, 0x2F, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0C, 0x1E]
    assert(Clockr.MasterclockEncoder.packetize({:value, %{h: 12, m: 30, s: 0}}, {0x00, 0x01}) == result)
  end
end
